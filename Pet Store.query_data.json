{
	"info": {
		"_postman_id": "583a2c31-6de3-4f68-a15f-a5729f6d8881",
		"name": "Pet Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33438869"
	},
	"item": [
		{
			"name": "Pet Type",
			"item": [
				{
					"name": "Create Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (Created)\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has created resource ID\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.data).to.have.property(\"_id\").that.is.not.null;",
									"    pm.expect(responseBody.data._id).to.have.lengthOf(24);",
									"    pm.collectionVariables.set(\"petId\", responseBody.data._id)",
									"})",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    const responseBody = pm.response.json();",
									"    const {data} = responseBody;",
									"    pm.expect(data.type).to.be.a('string')",
									"    pm.expect(data.type).to.eql('fishes')",
									"    pm.expect(data.count).to.be.a('number')",
									"    pm.expect(data.count).to.eql(10)",
									"    pm.expect(data.supplies).to.be.a('string')",
									"    pm.expect(data.supplies).to.eql('Check info for each individual that we have...')",
									"     pm.expect(data.description).to.be.a('string')",
									"    pm.expect(data.description).to.eql('Goldfish are most common')",
									"",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "     {\"pet\": {\"type\": \"Birds\",\n            \"count\": 22,\n            \"supplies\": \"Cage, food, water, perches and toys\",\n            \"description\": \"Often live in cages, but some let their birds roam the house. Many birds can be handled as long as they are raised as pets. They are also often noisy pets, but many of their sounds are quite pleasant.\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/pets",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ALL Pets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Pets - Value & Select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"Response return limited data based on query string\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"    pm.expect(responseData.data).to.not.include('Birds', 'Fish', 'Amphibians');",
									"    pm.expect(35).lt(40);",
									"    pm.expect(30).to.be.within(25, 40);",
									"});",
									"",
									"pm.test('Response return data by select', function () {",
									"    responseData.data.forEach(pet => {",
									"        pm.expect(pet).to.have.property('type');",
									"        pm.expect(pet).to.have.property('count');",
									"        pm.expect(pet).to.have.property('supplies');",
									"        pm.expect(pet).to.have.property('description');",
									"        pm.expect(pet).to.have.property('createdAt');",
									"        pm.expect(pet).to.not.have.property('updatedAt');",
									"        pm.expect(pet).to.not.have.property('_id');",
									"        pm.expect(pet.animal).to.be.an('array').that.is.not.empty;",
									"    });",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets?count>25&count<40&fields=-_id, -updatedAt",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							],
							"query": [
								{
									"key": "count>25",
									"value": null
								},
								{
									"key": "count<40",
									"value": null
								},
								{
									"key": "fields",
									"value": "-_id, -updatedAt"
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Pets - Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response return data for pagination\", function (){",
									"  pm.expect(new Set(responseData.data.map(item => item.type)).has('Amphibians', 'Fish')).to.be.true;",
									"});",
									"",
									"pm.test('Data array is present and contains the expected number of elements', function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.data).to.have.lengthOf(3);",
									"})",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets?skip=2&limit=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							],
							"query": [
								{
									"key": "skip",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Pets - Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"pm.test(\"Response return data in order by sorting\", function() {",
									"    pm.expect(response.data.map(item => item.type.toLowerCase())).to.have.ordered.members(['amphibians', 'birds', 'fish', 'mammals', 'reptiles']);",
									"     pm.expect(response.data).to.be.an('array');",
									"  response.data.forEach(function(pet) {",
									"    pm.expect(pet.type).to.be.a('string');",
									"  });",
									"})",
									"",
									"",
									"pm.test(\"Count is a non-negative integer\", function () {",
									"  response.data.forEach(function(pet) {",
									"    pm.expect(pet.count).to.be.a('number');",
									"    pm.expect(pet.count).to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets?sort=type",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							],
							"query": [
								{
									"key": "sort",
									"value": "type"
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Pets - Sort Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response return data in order by sorting reversed\", function(){",
									"  pm.variables.get(\"count\", response.data[0].count);",
									"  pm.expect(response.data[0].type).to.equal(\"Fish\");",
									"  pm.expect(response.data[0].count).to.be.above(35);",
									"  pm.expect(response.data).to.be.an('array').that.has.length.within(3,5);",
									"});",
									"",
									"pm.test('Response time is within acceptable range', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(50);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets?sort=-count",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							],
							"query": [
								{
									"key": "sort",
									"value": "-count"
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Pets - All Animals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets?populate=animal",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets"
							],
							"query": [
								{
									"key": "populate",
									"value": "animal"
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "GET By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should have all the Pet properties\", function() {",
									"      pm.collectionVariables.get(\"petId\", pm.response.json()._id);",
									"});",
									"",
									"pm.test(\"Response has all data\", function() {",
									"      pm.expect(pm.response.text()).to.include(\"_id\");",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"  var schema = {",
									"    type: \"object\",",
									"    properties: {",
									"      data: {",
									"        type: \"object\",",
									"        properties: {",
									"          _id: {",
									"            type: \"string\"",
									"          }",
									"        },",
									"        required: [\"_id\"]",
									"      }",
									"    }",
									"  };",
									"",
									"  var response = pm.response.json();",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets/{{petId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Response has updated by resource ID', function () {",
									"     pm.expect(jsonData.data).to.have.property(\"_id\").that.is.not.null;",
									"    pm.collectionVariables.get('petId', jsonData._id);",
									"});",
									"",
									"",
									"pm.test('Content-Type header is present and application/json', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Response status UPDATED by ID', function () {",
									"    pm.collectionVariables.set(\"Rep\")",
									"  ",
									"});",
									"  ",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"type\": \"Rep\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/pets/{{petId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test('Response has updated by resource ID', function () {",
									"    pm.collectionVariables.get('petId', data._id);",
									"   ",
									"})",
									"",
									"",
									"pm.test(\"Status code is 200 (DELETED)\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/pets/{{petId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"pets",
								"{{petId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Animals",
			"item": [
				{
					"name": "Create Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (Created)\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has created resource ID\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.data).to.have.property(\"_id\").that.is.not.null;",
									"    pm.expect(responseBody.data._id).to.have.lengthOf(24);",
									"    pm.collectionVariables.set(\"animalId\", responseBody.data._id)",
									"})",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    const responseBody = pm.response.json();",
									"    const {data} = responseBody;",
									"    pm.expect(data.name).to.be.a('string')",
									"    pm.expect(data.name).to.eql('Cats')",
									"    pm.expect(data.count).to.be.a('number')",
									"    pm.expect(data.count).to.eql(10)",
									"    pm.expect(data.description).to.be.a('string')",
									"    pm.expect(data.description).to.deep.eql('Furry fur balls')",
									"",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"animal\": {\n    \"name\": \"Lovebirds\",\n    \"count\": 5,\n    \"price\": 99.99,\n    \"food\": \"Seeds, berries, fruits, grains, grasses, leaf buds, and agricultural crops of corn, maize and figs. A lovebird's diet will consist of 1 1/2 to 2 ounces (45-60 grams) of feed daily for a single bird.\",\n    \"description\": \"As their name suggests, Lovebirds are known for being social and affectionate. They are monogamous and form strong bonds, and are among the types of birds that typically mate for life.\",\n    \"pet\": \"6600b7aec9a7c1edcad61117\"\n}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/animals",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ALL Animals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Animals - All Pets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals?populate=pet",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							],
							"query": [
								{
									"key": "populate",
									"value": "pet"
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Animals - Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals?price<10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							],
							"query": [
								{
									"key": "price<10",
									"value": null
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Animals - Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals?skip3&limit2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							],
							"query": [
								{
									"key": "skip3",
									"value": null
								},
								{
									"key": "limit2",
									"value": null
								}
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Animals - Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "ALL Animals - Select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process and have data property\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")",
									"})",
									"pm.test(\"Response has all data\", function() {",
									"     pm.response.to.have.jsonBody(\"data\")",
									" ",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals"
							]
						},
						"description": "Get All Pets"
					},
					"response": []
				},
				{
					"name": "GET By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should have all the Pet properties', function () {",
									"    pm.collectionVariables.get('animalId', pm.response.json()._id);",
									"})",
									"",
									"pm.test(\"Price is a valid decimal number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    if (responseData.data) {",
									"        responseData.data.forEach(function(animal) {",
									"            pm.expect(animal.price).to.exist(/^\\d+\\.\\d+$/);",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 20ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(20);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals/{{animalId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals",
								"{{animalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Response has updated by resource ID', function () {",
									"     pm.expect(jsonData.data).to.have.property(\"_id\").that.is.not.null;",
									"    pm.collectionVariables.get('animalId', jsonData._id);",
									"});",
									"",
									"",
									"pm.test('Content-Type header is present and application/json', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Response status UPDATED by ID', function () {",
									"    pm.collectionVariables.set(\"Lizard\")",
									"  ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Lizard\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/animals/{{animalId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals",
								"{{animalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test('Response has updated by resource ID', function () {",
									"    pm.collectionVariables.get('animalId', data._id);",
									"})",
									"",
									"pm.test(\"Response to clear collection variable\", function () { ",
									"pm.collectionVariables.unset(data._id);",
									"});",
									"",
									"pm.test(\"Status code is 200 (DELETED)\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/animals/{{animalId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"animals",
								"{{animalId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "petId",
			"value": ""
		},
		{
			"key": "Rep",
			"value": ""
		},
		{
			"key": "animalId",
			"value": ""
		},
		{
			"key": "Lizard",
			"value": ""
		}
	]
}